# Array

# 배열은 크기가 정해진 데이터의 공간이다. 한 번 정해지면 바꿀 수 없다.
# 배열은 원소에 즉시 접근할 수 있다. 원소의 번호는 0 부터 시작하고 이를 인덱스라고 한다.
# O(1)에 접근할 수 있다.
# 배열은 원소를 중간에 삽입/삭제 하려면 모든 원소를 다 옮겨야 한다.
# 최악의 경우 배열의 길이 N 만큼을 옮겨야 하므로 O(N)의 시간 복잡도를 가진다.
# 새로운 원소를 추가하기 위해서는 새로운 공간을 할당해야 하므로 매우 비효율적이다.

# Linked List : 화물열차

# 리스트의 크기가 정해지지 않은 데이터 공간이다.
# 연결 고리로 이어주기만 하면, 자유자재로 늘어날 수 있다.
# 특정 원소에 접근하려면 연결 고리를 따라 탐색해야 한다.
# 최악의 경우 O(N)의 시간 복잡도를 가진다.
# 여기서 화물 칸은 노드, 열결 고리는 포인터다.
# 삽입/삭제를 하기 위해서는 앞,뒤의 포인터만 변경하면 되기 때문에 O(1)의 시간 복잡도 안에 수행할 수 있다.


# 데이터에 접근하는 경우가 빈번하다면 Array를 사용하고, 삽입/삭제를 빈번하게 한다면 Linked List를 사용한다.

# Python에서의 리스트는 Array로 구현되었다. 하지만 내부적으로 동적 배열을 사용하기 때문에
# 배열이 길이가 늘어나도 O(1)의 시간 복잡도가 걸리도록 설계되었다.
